{
  "name": "imagemagick",
  "description": "A wrapper around the imagemagick cli",
  "version": "0.1.3",
  "author": {
    "name": "Rasmus Andersson",
    "email": "http://rsms.me/"
  },
  "licenses": [
    "MIT"
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rsms/node-imagemagick.git"
  },
  "engine": [
    "node >=0.6"
  ],
  "main": "imagemagick",
  "gitHead": "8ad6a7f251b1d1f3e5c14358140c82246cc15e5b",
  "readme": "# node-imagemagick\r\n\r\n**This is an abandoned version. Please see [@yourdeveloper/node-imagemagick](https://github.com/yourdeveloper/node-imagemagick) for the currently maintained version**\r\n\r\n[Imagemagick](http://www.imagemagick.org/) module for [Node](http://nodejs.org/).\r\n\r\n> Note: This code has been unmaintained for a long time. Please consider using the [gm](https://github.com/aheckmann/gm) module instead.\r\n\r\nYou can install this module using [npm](http://github.com/isaacs/npm):\r\n\r\n    npm install imagemagick\r\n\r\nRequires imagemagick CLI tools to be installed. There are numerous ways to install them. For instance, if you're on OS X you can use [Homebrew](http://mxcl.github.com/homebrew/): `brew install imagemagick`.\r\n\r\n## Example\r\n\r\n```javascript\r\nvar im = require('imagemagick');\r\nim.readMetadata('kittens.jpg', function(err, metadata){\r\n  if (err) throw err;\r\n  console.log('Shot at '+metadata.exif.dateTimeOriginal);\r\n})\r\n// -> Shot at Tue, 06 Feb 2007 21:13:54 GMT\r\n```\r\n\r\n## API\r\n\r\n### convert.path\r\n\r\nPath to the `convert` program. Defaults to `\"convert\"`.\r\n\r\n### identify.path\r\n\r\nPath to the `identify` program. Defaults to `\"identify\"`.\r\n\r\n### identify(path, callback(err, features))\r\n\r\nIdentify file at `path` and return an object `features`.\r\n\r\nExample:\r\n\r\n```javascript\r\nim.identify('kittens.jpg', function(err, features){\r\n  if (err) throw err;\r\n  console.log(features);\r\n  // { format: 'JPEG', width: 3904, height: 2622, depth: 8 }\r\n});\r\n```\r\n\r\n### identify(args, callback(err, output))\r\n\r\nCustom identification where `args` is an array of arguments. The result is returned as a raw string to `output`.\r\n\r\nExample:\r\n\r\n```javascript\r\nim.identify(['-format', '%wx%h', 'kittens.jpg'], function(err, output){\r\n  if (err) throw err;\r\n  console.log('dimension: '+output);\r\n  // dimension: 3904x2622\r\n});\r\n```\r\n\r\n### readMetadata(path, callback(err, metadata))\r\n\r\nRead metadata (i.e. exif) in `path` and return an object `metadata`. Modelled on top of `identify`.\r\n\r\nExample:\r\n\r\n```javascript\r\nim.readMetadata('kittens.jpg', function(err, metadata){\r\n  if (err) throw err;\r\n  console.log('Shot at '+metadata.exif.dateTimeOriginal);\r\n  // -> Shot at Tue, 06 Feb 2007 21:13:54 GMT\r\n});\r\n```\r\n\r\n### convert(args, callback(err, stdout, stderr))\r\n\r\nRaw interface to `convert` passing arguments in the array `args`.\r\n\r\nExample:\r\n\r\n```javascript\r\nim.convert(['kittens.jpg', '-resize', '25x120', 'kittens-small.jpg'], \r\nfunction(err, stdout){\r\n  if (err) throw err;\r\n  console.log('stdout:', stdout);\r\n});\r\n```\r\n\r\n### resize(options, callback(err, stdout, stderr))\r\n\r\nConvenience function for resizing an image, modelled on top of `convert`.\r\n\r\nThe `options` argument have the following default values:\r\n\r\n```javascript\r\n{\r\n  srcPath: undefined,\r\n  srcData: null,\r\n  srcFormat: null,\r\n  dstPath: undefined,\r\n  quality: 0.8,\r\n  format: 'jpg',\r\n  progressive: false,\r\n  width: 0,\r\n  height: 0,\r\n  strip: true,\r\n  filter: 'Lagrange',\r\n  sharpening: 0.2,\r\n  customArgs: []\r\n}\r\n```\r\n\r\nsrcPath, dstPath and (at least one of) width and height are required. The rest is optional.\r\n\r\nExample:\r\n\r\n```javascript\r\nim.resize({\r\n  srcPath: 'kittens.jpg',\r\n  dstPath: 'kittens-small.jpg',\r\n  width:   256\r\n}, function(err, stdout, stderr){\r\n  if (err) throw err;\r\n  console.log('resized kittens.jpg to fit within 256x256px');\r\n});\r\n```\r\n\r\nExample with stdin/stdout:\r\n\r\n```javascript\r\nvar fs = require('fs');\r\nim.resize({\r\n  srcData: fs.readFileSync('kittens.jpg', 'binary'),\r\n  width:   256\r\n}, function(err, stdout, stderr){\r\n  if (err) throw err\r\n  fs.writeFileSync('kittens-resized.jpg', stdout, 'binary');\r\n  console.log('resized kittens.jpg to fit within 256x256px')\r\n});\r\n```\r\n\r\n### crop(options, callback) ###\r\nConvenience function for resizing and cropping an image. _crop_ uses the resize method, so _options_ and _callback_ are the same. _crop_ uses _options.srcPath_, so make sure you set it :) Using only _options.width_ or _options.height_ will create a square dimensioned image.  Gravity can also be specified, it defaults to Center.   Available gravity options are [NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast]\r\n\r\nExample:\r\n\r\n```javascript\r\nim.crop({\r\n  srcPath: path,\r\n  dstPath: 'cropped.jpg',\r\n  width: 800,\r\n  height: 600,\r\n  quality: 1,\r\n  gravity: \"North\"\r\n}, function(err, stdout, stderr){\r\n  // foo\r\n});\r\n```\r\n\r\n## License (MIT)\r\n\r\nCopyright (c) 2010-2012 Rasmus Andersson <http://hunch.se/>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rsms/node-imagemagick/issues"
  },
  "homepage": "https://github.com/rsms/node-imagemagick#readme",
  "_id": "imagemagick@0.1.3",
  "_shasum": "fcc136a5a24a5233ef0eef0190a14806ce1cfa57",
  "_from": "git://github.com/rsms/node-imagemagick.git",
  "_resolved": "git://github.com/rsms/node-imagemagick.git#8ad6a7f251b1d1f3e5c14358140c82246cc15e5b"
}
